name: Publish RC on Main Commit

on:
  push:
    branches:
      - main

jobs:
  publish-rc:
    # Skip if commit message contains [skip publish] or [skip ci]
    if: |
      !contains(github.event.head_commit.message, '[skip publish]') &&
      !contains(github.event.head_commit.message, '[skip ci]')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      actions: write  # Required to trigger workflow_dispatch events

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Install Dependencies
        run: pnpm install

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump RC Version
        id: version
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Bump to next RC version
          if [[ $CURRENT_VERSION =~ ^([0-9]+\.[0-9]+\.[0-9]+)-rc\.([0-9]+)$ ]]; then
            # Already an RC, increment RC number
            BASE="${BASH_REMATCH[1]}"
            RC_NUM="${BASH_REMATCH[2]}"
            NEXT_RC=$((RC_NUM + 1))
            NEW_VERSION="${BASE}-rc.${NEXT_RC}"
          else
            # Not an RC, make it rc.1
            NEW_VERSION="${CURRENT_VERSION}-rc.1"
          fi

          echo "New version: $NEW_VERSION"

          # Update package.json
          npm version $NEW_VERSION --no-git-tag-version

          # Output for later steps
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit Version Bump
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          git add package.json pnpm-lock.yaml 2>/dev/null || git add package.json

          # Only commit if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: bump version to v${VERSION} [skip ci]"
            git push origin main
            echo "✅ Committed and pushed version bump to main"
          fi

      - name: Create Git Tag and Trigger Build
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Check if tag already exists
          if git ls-remote --tags origin | grep -q "refs/tags/v${VERSION}"; then
            echo "⚠️  Tag v${VERSION} already exists, skipping tag creation"
          else
            # Tag the commit that has the version bump
            git tag "v${VERSION}"
            git push origin "v${VERSION}"
            echo "✅ Created tag v${VERSION} on commit with version bump"

            # Trigger build workflow explicitly (GitHub Actions won't auto-trigger from workflow-created tags)
            echo "🔨 Triggering build-releases.yml workflow..."
            gh workflow run build-releases.yml --ref "v${VERSION}"
            echo "✅ Build workflow triggered for v${VERSION}"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to npm
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Check if version already exists
          if npm view @namastexlabs/speak@$VERSION version 2>/dev/null; then
            echo "⚠️  Version $VERSION already published, skipping npm publish"
            exit 0
          fi

          pnpm publish --tag next --access public --no-git-checks
          echo "✅ Published @namastexlabs/speak@${VERSION} to npm"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Notify Success
        if: success()
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "✅ Published v${VERSION} to npm @next"
          echo "📦 Install: npm install @namastexlabs/speak@next"
          echo "🔗 Release: https://github.com/${{ github.repository }}/releases/tag/v${VERSION}"
          echo "🎉 Success!"

      - name: Notify Failure
        if: failure()
        run: |
          echo "❌ RC publish failed"
          echo "Check logs above for details"
          exit 1
